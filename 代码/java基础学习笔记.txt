# Day01

\* J2SE 1.2                         Playground       运动场   1998-12-04

 里程碑式的版本，由此分成三大块：J2SE、J2ME、J2EE![1534557478462](C:\Users\student\AppData\Local\Temp\1534557478462.png)

### 关键字概述

–      被Java语言赋予特定含义的单词，用做专门用途的字符串 

### 关键字特点

​	 组成关键字的字母全部小写

​	常用的代码编辑器,针对关键字有特殊的颜色标记，非常直观

### Java保留字

现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标记符时要避免使用这些保留字 

（注意：byValue、cast、future、 generic、 inner、 operator、 outer、 rest、 var 、 goto 、const ）

### 常量概述

–      在程序执行的过程中，其值不可以发生改变的量

###  变量概述

–      在程序执行的过程中，在某个范围内其值可以发生改变的量

–      从本质上讲，变量其实是内存中的一小块区域

- 变量未赋值,不能直接使用 
- 变量只在它所属的范围内有效– 变量在哪对大括号内，变量就属于哪对大括号

![1534557709194](C:\Users\student\AppData\Local\Temp\1534557709194.png)

整数默认是int类型，定义long类型的数据时，要在数据后面加L

 浮点数默认是double类型，定义float类型的数据时，要在数据后面加F

## 标识符

java中，凡是可以自己取名字的地方。

### 隐式数据类型转换

取值范围小的数据类型与取值范围大的数据类型进行运算,会先将小的数据类型提升为大的,再运算

### 强制类型数据转换

强制转换的格式

​       * b = (byte)(a + b);

强制转换的注意事项

​       * 如果超出了被赋值的数据类型的取值范围得到的结果会与你期望的结果不同

## 算数运算符

•       运算符

对常量和变量进行操作的符号称为运算符

•       表达式

用运算符把常量或者变量连接起来符号java语法的式子就可以称为表达式

- 算数运算符++和--的用法
- ​       如果++或者--在变量的后面，先拿变量参与操作，后变量做++或者--
- ​        如果++或者--在变量的前面，先变量做++或者--，后拿变量参与操作

### 逻辑运算符 

&&具有短路效果。左边是false，右边不执行。 

||具有短路效果.左边是true,右边不执行 

# Day02

### switch

switch表示这是switch语句

表达式的取值：byte,short,char,int

JDK5以后可以是枚举

JDK7以后可以是String

case后面跟的是要和表达式进行比较的值

### Break的使用场景和作用

break的使用场景：

在选择结构switch语句中

在循环语句中

离开使用场景的存在是没有意义的，不能单独使用

break的作用：

跳出单层循环

### continue的使用场景

在循环语句中

离开使用场景的存在是没有意义的

continue的作用：

单层循环对比break，然后总结两个的区别

break  退出当前循环

continue  结束本次循环，进入循环的下一次

###  数组概念

数组是存储同一种数据类型多个元素的容器。

数组既可以存储基本数据类型，也可以存储引用数据类型。

## 数组的初始化

Java中的数组必须先初始化,然后才能使用。

所谓初始化：就是为数组中的数组元素分配内存空间，并为每个数组元素赋值。

###  数组的初始化方式

####  	动态初始化:初始化时只指定数组长度，由系统为数组分配初始值

​	格式：数据类型[] 数组名 = new 数据类型[数组长度];

​	数组长度其实就是数组中元素的个数。

#### 	静态初始化:初始化时指定每个数组元素的初始值，由元素个数决定数组长度

​      	格式：数据类型[] 数组名 = new 数据类型[]{元素1,元素2,...}; 

两个常见小问题：

- A:java.lang.ArrayIndexOutOfBoundsException

​         数组越界异常

​         产生的原因：就是你访问了不存在的索引元素。

* B:java.lang.NullPointerException

​          空指针异常

​          产生的原因：数组已经不指向堆内存的数据了，你还使用数组名去访问元素。

###  二维数组格式

定义格式

数据类型[][] 数组名;

数据类型 数组名[][]; 不推荐

数据类型[] 数组名[]; 不推荐

初始化方式

数据类型[][] 变量名 = new 数据类型[m][n];

数据类型[][] 变量名 = new 数据类型[][]{{元素…},{元素…},{元素…}};

简化版格式：数据类型[][] 变量名 = {{元素…},{元素…},{元素…}};

# Day03

### 方法的概述

简单的说：方法就是完成特定功能的代码块

### 方法格式

修饰符 返回值类型 方法名(参数类型 参数名1，参数类型 参数名2…) {

​                   方法体;

​                   return 返回值;

}

### 方法格式解释

修饰符 (目前记住 public static)

返回值类型 用于限定返回值的数据类型

方法名 一个名字，为了方便我们调用方法

参数类型 用于接收调用方法时传入的数据的类型

参数名  用于接收调用方法时传入的数据的变量

方法体 完成功能的代码

return 结束方法，把返回值带给调用者

### 有明确返回值的方法调用：

单独调用，没有意义

输出调用，有意义，但是不够好，因为我不一定非要把结果输出

赋值调用，推荐方式

## 方法重载的概述和基本使用

在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。

方法重载特点：

与返回值类型无关，只看方法名和参数列表

在调用时，虚拟机通过参数列表的不同来区分同名方法

### 方法的形式参数为基本数据类型

方法的参数是基本类型的时候：

​             形式参数的改变不影响实际参数。

  形式参数：用于接收实际数据的变量

  实际参数：实际参与运算的变量

## Eclipse断点调试概述

  Eclipse的断点调试可以查看程序的执行流程和解决程序中的bug

# day04

### 面向对象思想特点

面向对象是基于面向过程的编程思想；

​       面向过程：强调的是每一个功能的步骤

​       面向对象：强调的是对象，然后由对象去调用功能

二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是功能行为。面向对象，将功能封装进对象，强调具备了功能的对象。

### 类与类之间的关系 

关联关系----------继承关系

## 类与对象的关系

类(class)和对象(object)是面向对象的核心概念。

类是对一类事物描述，是抽象的、概念上的定义

对象是实际存在的该类事物的每个个体，因而也称实例(instance)。

“万事万物皆对象”

### java类及类的成员

属 性：对应类中的成员变量

行 为：对应类中的成员方法

Field = 属性 = 成员变量，Method =  (成员)方法 = 函数 

### 创建java自定义类步骤：

1.定义类（考虑修饰符、类名）

2.编写类的属性（考虑修饰符、属性类型、属性名、初始化值）

3.编写类的方法（考虑修饰符、返回值类型、方法名、形参等）

### 成员变量（属性）和局部变量的区别

#### 成员变量：

成员变量定义在类中，在整个类中都可以被访问。

成员变量分为类成员变量和实例成员变量，实例变量存在于对象所在的堆内存中。

成员变量有默认初始化值。

成员变量的权限修饰符可以根据需要，选择任意一个

#### 局部变量：

局部变量只定义在局部范围内，如：方法内，代码块内等。

局部变量存在于栈内存中。

作用的范围结束，变量空间会自动释放。

局部变量没有默认初始化值，每次必须显式初始化。

局部变量声明时不指定权限修饰符

### 类的访问机制：

在一个类中的访问机制：类中的方法可以直接访问类中的成员变量。（例外：static方法访问非static，编译不通过。）

在不同类中的访问机制：

先创建要访问类的对象，再用对象访问类中定义的成员

### 匿名对象 

我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。如：new Person().shout(); 

使用：如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。 

​	    我们经常将匿名对象作为实参传递给一个方法调用。

### 方法

什么是方法（函数）

方法只有被调用才会被执行 

方法是类或对象行为特征的抽象，也称为函数。 

Java里的方法不能独立存在，所有的方法必须定义在类里。

```
修饰符 返回值类型 方法名（参数类型 形参1，参数类型 形参2，….）｛

  程序代码

  return 返回值;

｝
```

其中：

形式参数：在方法被调用时用于接收外部传入的数据的变量。

参数类型：就是该形式参数的数据类型。

返回值：方法在执行完毕后返还给调用它的程序的数据。

返回值类型：方法要返回的结果的数据类型。

实参：调用方法时实际传给函数形式参数的数据。

| 重载的概念                                                   |
| ------------------------------------------------------------ |
| 在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可。 |
| 重载的特点：                                                 |
| 与返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。 |

### 体会可变个数的形参 

说明：

1.可变参数：方法参数部分指定类型的参数个数是可变多个

2.声明方式：方法名（参数的类型名...参数名）

3.可变参数方法的使用与方法参数部分使用数组是一致的

4.方法的参数部分有可变形参，需要放在形参声明的最后

### 方法的参数传递 

方法，必须有其所在类或对象调用才有意义。若方法含有参数：

形参：方法声明时的参数

实参：方法调用时实际传给形参的参数值

Java的实参值如何传入方法呢？

​        Java里方法的参数传递方式只有一种：值传递。  即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。

### 面向对象特征之一：封装和隐藏 

#### 1Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx()和setXxx()实现对该属性的操作，以实现下述目的：

隐藏一个类中不需要对外提供的实现细节；

使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；

便于修改，增强代码的可维护性

#### 2将某段实现特点功能的代码放到方法中（也叫封装）

### 类的成员之三：构造器(构造方法、构造函数) 

#### 构造器的特征

它具有与类相同的名称

它不声明返回值类型。（与声明为void不同）

不能被static、final、synchronized、abstract、native修饰，不能有return语句返回值

#### 构造器的作用：创建对象；给对象进行初始化

### 构造器

根据参数不同，构造器可以分为如下两类：

隐式无参构造器（系统默认提供）

显式定义一个或多个构造器（无参、有参）

注  意：

Java语言中，每个类都至少有一个构造器

默认构造器的修饰符与所属类的修饰符一致

一旦显式定义了构造器，则系统不再提供默认构造器

一个类可以创建多个重载的构造器

父类的构造器不可被子类继承

### 构造器重载

构造器一般用来创建对象的同时初始化对象。

构造器重载使得对象的创建更加灵活，方便创建各种不同的对象。

构造器重载，参数列表必须不同

关键字—this

在java中，this关键字比较难理解，它的作用和其词义很接近。

- 它在方法内部使用，即这个方法所属对象的引用；
- 它在构造器内部使用，表示该构造器正在初始化的对象。

  this表示当前对象，可以调用类的属性、方法和构造器

### String类的构造方法

​              String(String original):把字符串数据封装成字符串对象

​              String(char[] value):把字符数组的数据封装成字符串对象

​              String(char[] value, int index, int count):把字符数组中的一部分数据封装成字符串对象

#### 创建字符串对象两种方式的区别

#### 通过构造方法创建的字符串对象和直接赋值方式创建的字符串对象有什么区别呢?

- 通过构造方法创建字符串对象是在堆内存。
- 直接赋值方式创建对象是在方法区的常量池。    

####  ==:

- 基本数据类型：比较的是基本数据类型的值是否相同

- 引用数据类型：比较的是引用数据类型的地址值是否相同

### String类的判断功能

boolean equals(Object obj):比较字符串的内容是否相同

  boolean equalsIgnoreCase(String str):比较字符串的内容是否相同,忽略大小写

  boolean startsWith(String str):判断字符串对象是否以指定的str开头

  boolean endsWith(String str):判断字符串对象是否以指定的str结尾

###  String类的获取功能：

\*  int length():获取字符串的长度，其实也就是字符个数

\*   char charAt(int index):获取指定索引处的字符

\*   int indexOf(String str):获取str在字符串对象中第一次出现的索引

\*   String substring(int start):从start开始截取字符串

\*   String substring(int start,int end):从start开始，到end结束截取字符串。包括start，不包括end

###  转换方法演示

char[] toCharArray():把字符串转换为字符数组

String toLowerCase():把字符串转换为小写字符串

String toUpperCase():把字符串转换为大写字符串



### StringBuilder类概述

StringBuilder：是一个可变的字符串。字符串缓冲区类。

String和StringBuilder的区别：

​              String的内容是固定的

​              StringBuilder的内容是可变的



### StringBuilder类的常用方法

A:构造方法:

​       StringBuilder()

B:成员方法:

​      public int capacity():返回当前容量 (理论值)

​       public int length():返回长度(已经存储的字符个数)

​       public StringBuilder append(任意类型):添加数据，并返回自身对象

​       public StringBuilder reverse():反转功能

# day05

### 对象数组概述

 A:基本类型的数组:存储的元素为基本类型

 B:对象数组:存储的元素为引用类型

### 集合概述

为了方便对多个对象进行操作，我们就必须对这多个对象进行存储，而要想对多个对象进行存储，就不能是一个基本的变量，而应该是一个容器类型的变量 

###  ArrayList删改查方法

A:获取元素

​    public E get(int index):返回指定索引处的元素

B:集合长度

​    public int size():返回集合中的元素的个数

C:删除元素

​    public boolean remove(Object o):删除指定的元素，返回删除是否成功

​    public E remove(int index):删除指定索引处的元素，返回被删除的元素

D:修改元素

​    public E set(int index,E element):修改指定索引处的元素，返回被修改的元素

### ArrayList遍历

集合的遍历思想和数组的遍历思想相同

循环遍历容器,依次取出里面的元素即可

## IO流概述及分类

 IO流用来处理设备之间的数据传输

  Java对数据的操作是通过流的方式

  Java用于操作流的类都在IO包中

   流按流向分为两种：输入流，输出流

### 1.1.1    FileWriter向文件中写数据

#### A:FileWriter向文件中写数据操作步骤:

​      a:使用FileWriter流关联文件

​      b:利用FileWriter的写方法写数据

​      c:利用FileWriter的刷新方法将数据从内存刷到硬盘上

​      d:利用FileWriter的关闭流方法将释放占用的系统底层资源

#### B:FileWriter方法:

构造方法

​	FileWriter(String fileName)  传入一个文件的路径

成员方法

​	void write(String str)  向文件中写str

​	void flush()  将内存中的数据刷新到文件中

​	void close()  关流释放系统底层资源

### FileWriter其它写方法

void write(String  str):写一个字符串数据

void write(String  str,int  index,int  len):写一个字符串中的一部分数据

void write(int  ch):写一个字符数据,这里写int类型的好处是既可以写char类型的数据，也可以写char对应的int类型的值。'a',97

void write(char[]  chs):写一个字符数组数据

void write(char[]  chs,int  index,int  len):写一个字符数组的一部分数据

## FileReader从文件中读数据

###  FileReader方法:

构造方法

​	FileReader(String fileName)  传入一个文件的路径

成员方法

​	int read()  读取单个字符

​	int read(char[] cbuf)  读取字符，并将字符读入数组

### 缓冲流介绍和使用

BufferedWriter:将文本写入字符输出流，缓冲各个字符，从而提供单个字符、数组和字符串的高效写入。 

 BufferedReader:从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取

## 缓冲流的特有方法使用

####  BufferedWriter

​               void newLine():写一个换行符，这个换行符由系统决定,不同的操作系统newLine()方法使用的换行符不同

windows:\r\n   			  linux:\n   			mac:\r

 BufferedReader

​               String readLine():一次读取一行数据，但是不读取换行符